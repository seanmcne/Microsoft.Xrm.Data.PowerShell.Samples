# Generated by: Sean McNellis (seanmcn)
#
# Copyright © Microsoft Corporation.  All Rights Reserved.
# This code released under the terms of the 
# Microsoft Public License (MS-PL, http://opensource.org/licenses/ms-pl.html.)
# Sample Code is provided for the purpose of illustration only and is not intended to be used in a production environment. 
# THIS SAMPLE CODE AND ANY RELATED INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, 
# INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR PURPOSE. 
# We grant You a nonexclusive, royalty-free right to use and modify the Sample Code and to reproduce and distribute the object code form of the Sample Code, provided that. 
# You agree: 
# (i) to not use Our name, logo, or trademarks to market Your software product in which the Sample Code is embedded; 
# (ii) to include a valid copyright notice on Your software product in which the Sample Code is embedded; 
# and (iii) to indemnify, hold harmless, and defend Us and Our suppliers from and against any claims or lawsuits, including attorneys’ fees, that arise or result from the use or distribution of the Sample Code 

function EnablePluginStep
{
    param
    (
        [Guid] $StepId    
    )

    Set-CrmRecordState -EntityLogicalName sdkmessageprocessingstep -Id $StepId `
    -StateCode Enabled -StatusCode Enabled
}

function DisablePluginStep
{
    param
    (
        [Guid] $StepId    
    )

    Set-CrmRecordState -EntityLogicalName sdkmessageprocessingstep -Id $StepId `
    -StateCode Disabled -StatusCode Disabled
}

# Connect to Dynamics CRM. Use Connect-CrmOnPremDiscovery for On-Premise
Connect-CrmOnlineDiscovery -InteractiveMode

# First of all, get all custom assemblies
$assemblies = Get-CrmRecords -conn $conn -EntityLogicalName pluginassembly `
-FilterAttribute customizationlevel -FilterOperator eq -FilterValue 1 `
-Fields * -WarningAction SilentlyContinue

# Display retrieved assemblies name
$assemblies.CrmRecords | select name

# Instantiate a List to contain Steps
$steps = New-Object System.Collections.Generic.List[object]

# Loop all assemblies to get steps. 
foreach($assembly in $assemblies.CrmRecords)
{
    Write-Host 'Getting Steps for' $assembly.name

    # Get all registered steps for the assembly
    $sdkmessages = Get-CrmSdkMessageProcessingStepsForPluginAssembly `
    -conn $conn -PluginAssemblyName $assembly.name -WarningAction SilentlyContinue
    
    # Add only enabled step to the list
    foreach($enabledStep in ($sdkmessages | ? {$_.statecode -eq 'Enabled'}))
    {
        $steps.Add($enabledStep)
    }
   
}

# Disable all enabled steps.
foreach($step in $steps)
{
    Write-Host 'Disables' $step.name
    DisablePluginStep -StepId $step.sdkmessageprocessingstepid
}

## Do somework while plugin steps disabled ##

# Enable all disabled steps.
foreach($step in $steps)
{
    Write-Host 'Enables' $step.name
    EnablePluginStep -StepId $step.sdkmessageprocessingstepid
}
