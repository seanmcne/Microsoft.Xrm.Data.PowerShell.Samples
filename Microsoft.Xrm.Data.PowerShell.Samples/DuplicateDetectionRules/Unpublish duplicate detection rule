function UnPublish-CrmDuplicateDetectionRule{

 <#
 .SYNOPSIS
  This function takes the name of duplicate detection rule as an argument, and unpublish it if it was published earlier.
 
 .DESCRIPTION
  This function takes the name of duplicate detection rule as an argument, and unpublish it if it was published. In case
  multiple rules have the same name it will unpublishe the first matching rule only, but passing argument 'UnPublishAll' 1
  all matching rules will be unpublished.
 
 .PARAMETER conn
 A connection to your CRM organizatoin. Use $conn = Get-CrmConnection <Parameters> to generate it.
 .PARAMETER DuplicateDetectionRule
 String name of duplicate detection rules
 
 .PARAMETER UnPublishAll
 Optional and false by default. Passing 1 will unpublish all rules that have matching name. It should be
 used only if more then one duplicate detection rules have same name. Omitting it will just unpublish the first (or the only)
 matching rule.   
 
 .EXAMPLE 
 Example 1. Unpublish the first (or the only) rule among matching rules:
 UnPublish-CrmDuplicateDetectionRules -conn $conn  -DuplicateDetectionRule "Accounts with the same Account Name" 
 Example 2. Unpublish all matching rules:
 UnPublish-CrmDuplicateDetectionRules -conn $conn -DuplicateDetectionRule "Accounts with the same Account Name" -UnPublishAll 1
#>
    [CmdletBinding()]
    PARAM(
        [parameter(Mandatory=$true)]
        [Microsoft.Xrm.Tooling.Connector.CrmServiceClient]$conn,
        [parameter(Mandatory=$true, Position=1)]
        [string]$DuplicateDetectionRule,
        [parameter(Mandatory=$false, Position=2)]
        [bool]$UnPublishAll
    )
      
     # $conn =  VerifyCrmConnectionParam $conn
      
      $fetch = @"
                <fetch>
                  <entity name="duplicaterule" >
                    <all-attributes/>
                    <filter>
                      <condition attribute="statuscode" operator="eq" value="2" />
                      <condition attribute="name" operator="eq" value="$DuplicateDetectionRule"/>
                    </filter>
                  </entity>
                </fetch>
"@
      $matchingDDRules = Get-CrmRecordsByFetch -conn $conn -Fetch $fetch

      Write-Host $matchingDDRules.Count " matching rules found"    
     
      if($matchingDDRules.Count -lt 1)
      {      
        throw "Duplicate rule $DuplicateDetectionRule not found"
      }
      
     
      if($UnPublishAll -eq $false)
      {      
      Write-Host "UnPublishing single rule"
      $ddRule_toUnPublish = New-Object Microsoft.Crm.Sdk.Messages.UnpublishDuplicateRuleRequest
      $ddRule_toUnPublish.DuplicateRuleId= $matchingDDRules.CrmRecords[0].duplicateruleid
      $conn.ExecuteCrmOrganizationRequest($ddRule_toUnPublish,$trace)   
      Write-Host "Single rule unpublished"  
      }
      else
      { 
        Write-Host "UnPublishing multiple rules"
        foreach($rule in $matchingDDRules.CrmRecords)
        {
            write-host "unpublishing rule id: " $rule.duplicateruleid
            $ddRule_toUnPublish = New-Object Microsoft.Crm.Sdk.Messages.UnpublishDuplicateRuleRequest            
            $ddRule_toUnPublish.DuplicateRuleId= $rule.duplicateruleid
            $conn.ExecuteCrmOrganizationRequest($ddRule_toUnPublish,$trace)  
            Write-Host "Rule unpublished"       
        }
        Write-Host "Multiple rules unpublished"
      }      
}
